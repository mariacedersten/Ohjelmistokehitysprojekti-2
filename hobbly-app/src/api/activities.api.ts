/**
 * @fileoverview API —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏
 * @module api/activities
 * @description –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Supabase REST API
 */

import {
  apiClient,
  storageClient,
  buildFilterQuery,
  buildPaginationConfig,
  buildOrderQuery,
  API_CONSTANTS
} from './config';
import {
  Activity,
  ActivityFormData,
  ActivityFilters,
  ApiListResponse,
  Category,
  Tag,
  User,
  UserRole
} from '../types';
import { AxiosResponse } from 'axios';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏
 * @class
 * @description –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, —á—Ç–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
 */
class ActivitiesAPI {
  private readonly endpoint = '/activities';
  private readonly fullViewEndpoint = '/activities_full';

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è view `activities_full`
   * ‚ö†Ô∏è –í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ (isApproved=true) –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {ActivityFilters} filters - –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @param {number} page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
   * @param {string} orderBy - –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   * @param {boolean} ascending - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   * @param {string} currentUserId - ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è ORGANIZER - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏)
   * @param {UserRole} currentUserRole - –†–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<ApiListResponse<Activity>>} –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
   *
   * @example
   * // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * const activities = await activitiesAPI.getActivities(
   *   { categoryId: '123', freeOnly: true },
   *   1,
   *   20,
   *   'created_at',
   *   false,
   *   'user-123',
   *   UserRole.ORGANIZER
   * );
   */
  async getActivities(
    filters: ActivityFilters = {},
    page: number = 1,
    limit: number = API_CONSTANTS.DEFAULT_PAGE_SIZE,
    orderBy: string = 'created_at',
    ascending: boolean = false,
    currentUserId?: string,
    currentUserRole?: UserRole
  ): Promise<ApiListResponse<Activity>> {
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
      const queryParams: Record<string, any> = {
        is_deleted: 'is.false', // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'is.false' –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        isApproved: 'eq.true', // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      };

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –≤—ã—Ä–∞–∑–∏—Ç—å –æ–¥–Ω–∏–º –∫–ª—é—á–æ–º (–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è price, id=in.(...))
      const extraParams: string[] = [];

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è ORGANIZER - —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (currentUserRole === UserRole.ORGANIZER && currentUserId) {
        queryParams.user_id = `eq.${currentUserId}`;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      if (filters.search) {
        queryParams.or = `(title.ilike.*${filters.search}*,description.ilike.*${filters.search}*,location.ilike.*${filters.search}*,organizer_name.ilike.*${filters.search}*)`;
      }

      if (filters.categoryId) {
        queryParams.category_id = `eq.${filters.categoryId}`;
      }

      if (filters.type) {
        queryParams.type = `eq.${filters.type}`;
      }

      if (filters.location) {
        queryParams.location = `ilike.*${filters.location}*`;
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ (–∫–∞–∂–¥—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º)
      if (filters.freeOnly) {
        extraParams.push('price=eq.0');
      } else {
        if (filters.minPrice !== undefined) extraParams.push(`price=gte.${filters.minPrice}`);
        if (filters.maxPrice !== undefined) extraParams.push(`price=lte.${filters.maxPrice}`);
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º (tag_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã activity_tags)
      if (filters.tags && filters.tags.length > 0) {
        try {
          const tagIds = filters.tags.join(',');
          const tagFilterUrl = `/activity_tags?tag_id=in.(${tagIds})&select=activity_id`;
          const tagResp: AxiosResponse<{ activity_id: string }[]> = await apiClient.get(tagFilterUrl);
          const activityIds = Array.from(new Set((tagResp.data || []).map(r => r.activity_id))).filter(Boolean);
          if (activityIds.length === 0) {
            return {
              data: [],
              pagination: { page, limit, total: 0 },
              total: 0
            };
          }
          const inList = activityIds.join(',');
          extraParams.push(`id=in.(${inList})`);
        } catch (tagErr) {
          console.warn('Failed to filter by tags, proceeding without tag filter:', tagErr);
        }
      }

      // –°—Ç—Ä–æ–∏–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const filterQuery = buildFilterQuery(queryParams);
      const orderQuery = buildOrderQuery(orderBy, ascending);
      const paginationConfig = buildPaginationConfig(page, limit);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ view `activities_full`
      // Use view `activities_full` which already exposes related fields
      const extra = extraParams.length ? `&${extraParams.join('&')}` : '';
      const response: AxiosResponse<any[]> = await apiClient.get(
        `${this.fullViewEndpoint}?${filterQuery}${extra}&order=${orderQuery}&select=*`,
        paginationConfig
      );

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
      const contentRange = response.headers['content-range'];
      const total = contentRange ? parseInt(contentRange.split('/')[1]) : 0;

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const activities = response.data.map(this.transformActivity);

      return {
        data: activities,
        pagination: {
          page,
          limit,
          total
        },
        total
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ ID
   * @param {string} id - ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @returns {Promise<Activity>} –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   * @throws {ApiError} –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
   *
   * @example
   * const activity = await activitiesAPI.getActivityById('123-456-789');
   */
  async getActivityById(id: string): Promise<Activity> {
    try {
      const response: AxiosResponse<any[]> = await apiClient.get(
        `${this.fullViewEndpoint}?id=eq.${id}&select=*`
      );

      if (!response.data || response.data.length === 0) {
        throw new Error('Activity not found');
      }

      const activityData = response.data[0];
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–µ, –≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ
      if (activityData.user_id) {
        try {
          const organizerResponse: AxiosResponse<any[]> = await apiClient.get(
            `/user_profiles?id=eq.${activityData.user_id}&select=avatar_url`
          );
          console.log('!!!organizerResponse',  organizerResponse.data[0]);
          if (organizerResponse.data && organizerResponse.data.length > 0) {
            activityData.organizer_photo_url = organizerResponse.data[0].avatar_url;
          }
        } catch (organizerError) {
          console.warn('Failed to fetch organizer photo:', organizerError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ñ–æ—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
        }
      }

      return this.transformActivity(activityData);
    } catch (error) {
      console.error('Error fetching activity by ID:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {ActivityFormData} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {string} currentUserId - ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Activity>} –°–æ–∑–¥–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
   * @throws {ApiError} –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
   *
   * @example
   * const newActivity = await activitiesAPI.createActivity({
   *   title: '–§—É—Ç–±–æ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è',
   *   description: '–î–ª—è –¥–µ—Ç–µ–π 7-12 –ª–µ—Ç',
   *   type: ActivityType.CLUB,
   *   categoryId: '123',
   *   location: '–•–µ–ª—å—Å–∏–Ω–∫–∏',
   *   tags: ['tag1', 'tag2']
   * }, 'user-123');
   */
  async createActivity(data: ActivityFormData, currentUserId: string): Promise<Activity> {
    try {
      console.log('üöÄ Creating new activity...');
      console.log('üìã Input activity data:', {
        title: data.title,
        type: data.type,
        categoryId: data.categoryId,
        location: data.location,
        price: data.price,
        startDate: data.startDate,
        endDate: data.endDate,
        tagsCount: data.tags?.length || 0,
        hasDescription: !!data.description,
        hasImage: !!data.image || !!data.imageUrl
      });

      // Validate required fields
      const requiredFields = ['title', 'description', 'type', 'categoryId', 'location'];
      const missingFields = requiredFields.filter(field => !data[field as keyof ActivityFormData]);
      if (missingFields.length > 0) {
        throw new Error(`Missing required fields: ${missingFields.join(', ')}`);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª
      let imageUrl = data.imageUrl || null;
      if (data.image) {
        console.log('üì∏ Uploading image...');
        imageUrl = await this.uploadImage(data.image);
        console.log('‚úÖ Image uploaded:', imageUrl);
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å proper null handling
      const activityData = {
        title: data.title.trim(),
        description: data.description.trim(),
        short_description: data.shortDescription?.trim() || (data.description.length > 100 ? data.description.substring(0, 97) + '...' : data.description.trim()),
        type: data.type,
        category_id: data.categoryId,
        location: data.location.trim(),
        address: data.address?.trim() || null,
        price: data.price || null,
        currency: data.currency || 'EUR',
        image_url: imageUrl,
        start_date: data.startDate ? new Date(data.startDate).toISOString() : null,
        end_date: data.endDate ? new Date(data.endDate).toISOString() : null,
        max_participants: data.maxParticipants || null,
        min_age: data.minAge || null,
        max_age: data.maxAge || null,
        contact_email: data.contactEmail?.trim() || null,
        contact_phone: data.contactPhone?.trim() || null,
        external_link: data.externalLink?.trim() || null,
        user_id: currentUserId,
        is_deleted: false
      };

      console.log('üíæ Activity data prepared for database:', {
        ...activityData,
        description: `${activityData.description.substring(0, 50)}...`,
        start_date: activityData.start_date,
        end_date: activityData.end_date,
        category_id: activityData.category_id,
        type: activityData.type
      });

      // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      console.log('‚¨ÜÔ∏è Sending POST request to /activities...');
      const response: AxiosResponse<Activity[]> = await apiClient.post(
        '/activities',
        activityData
      );

      console.log('‚úÖ Create response received:', {
        status: response.status,
        statusText: response.statusText,
        hasData: !!response.data,
        dataLength: Array.isArray(response.data) ? response.data.length : 0
      });

      if (!response.data || !Array.isArray(response.data) || response.data.length === 0) {
        console.error('‚ùå Invalid response structure:', response.data);
        throw new Error('No data returned from activity creation');
      }

      const activity = response.data[0];
      console.log('üìä Created activity ID:', activity.id);

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏
      if (data.tags && data.tags.length > 0) {
        console.log('üè∑Ô∏è Adding tags:', data.tags);
        try {
          await this.addTagsToActivity(activity.id, data.tags);
          console.log('‚úÖ Tags added successfully');
        } catch (tagError: any) {
          console.error('‚ö†Ô∏è Failed to add tags, but activity was created:', tagError);
          // Don't fail the entire operation if tags fail
        }
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      console.log('üîç Fetching complete activity data...');
      return this.getActivityById(activity.id);

    } catch (error: any) {
      console.error('‚ùå Failed to create activity');
      console.error('üîç Error details:', {
        message: error.message,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        url: error.config?.url,
        method: error.config?.method,
        requestData: error.config?.data
      });

      // Provide user-friendly error messages based on status codes
      if (error.response?.status === 400) {
        const errorMsg = error.response?.data?.message || error.message;
        throw new Error(`Invalid activity data: ${errorMsg}`);
      } else if (error.response?.status === 401) {
        throw new Error('Authentication required. Please sign in again.');
      } else if (error.response?.status === 403) {
        throw new Error('Access denied. You do not have permission to create activities.');
      } else if (error.response?.status === 422) {
        const errorMsg = error.response?.data?.message || error.message;
        throw new Error(`Validation error: ${errorMsg}`);
      } else if (error.response?.status >= 500) {
        throw new Error('Server error. Please try again later.');
      }

      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {string} id - ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {Partial<ActivityFormData>} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @param {string} currentUserId - ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
   * @param {UserRole} currentUserRole - –†–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Activity>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
   * @throws {ApiError} –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   *
   * @example
   * const updated = await activitiesAPI.updateActivity('123', {
   *   title: '–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
   *   price: 30
   * }, 'user-123', UserRole.ORGANIZER);
   */
  async updateActivity(
    id: string,
    data: Partial<ActivityFormData>,
    currentUserId?: string,
    currentUserRole?: UserRole
  ): Promise<Activity> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è ORGANIZER
      if (currentUserRole === UserRole.ORGANIZER && currentUserId) {
        const activity = await this.getActivityById(id);
        if (activity.userId !== currentUserId) {
          throw new Error('Access denied: You can only edit your own activities');
        }
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
      let imageUrl = undefined;
      if (data.image) {
        imageUrl = await this.uploadImage(data.image);
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateData: any = {};

      if (data.title !== undefined) updateData.title = data.title;
      if (data.description !== undefined) {
        updateData.description = data.description;
        updateData.short_description = data.description.substring(0, 97) + '...';
      }
      if (data.type !== undefined) updateData.type = data.type;
      if (data.categoryId !== undefined) updateData.category_id = data.categoryId;
      if (data.location !== undefined) updateData.location = data.location;
      if (data.address !== undefined) updateData.address = data.address;
      if (data.price !== undefined) updateData.price = data.price;
      if (imageUrl !== undefined) updateData.image_url = imageUrl;
      if (data.startDate !== undefined) updateData.start_date = data.startDate;
      if (data.endDate !== undefined) updateData.end_date = data.endDate;
      if (data.maxParticipants !== undefined) updateData.max_participants = data.maxParticipants;
      if (data.minAge !== undefined) updateData.min_age = data.minAge;
      if (data.maxAge !== undefined) updateData.max_age = data.maxAge;
      if (data.contactEmail !== undefined) updateData.contact_email = data.contactEmail;
      if (data.contactPhone !== undefined) updateData.contact_phone = data.contactPhone;
      if (data.externalLink !== undefined) updateData.external_link = data.externalLink;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      await apiClient.patch(
        `/activities?id=eq.${id}`,
        updateData
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
      if (data.tags) {
        await this.updateActivityTags(id, data.tags);
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      return this.getActivityById(id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
      throw error;
    }
  }

  /**
   * –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É)
   * @param {string} id - ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {string} currentUserId - ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
   * @param {UserRole} currentUserRole - –†–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   * @throws {ApiError} –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
   *
   * @example
   * await activitiesAPI.softDeleteActivity('123', 'user-123', UserRole.ORGANIZER);
   */
  async softDeleteActivity(
    id: string,
    currentUserId?: string,
    currentUserRole?: UserRole
  ): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è ORGANIZER
      if (currentUserRole === UserRole.ORGANIZER && currentUserId) {
        const activity = await this.getActivityById(id);
        if (activity.userId !== currentUserId) {
          throw new Error('Access denied: You can only delete your own activities');
        }
      }

      await apiClient.patch(
        `/activities?id=eq.${id}`,
        { is_deleted: true }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
      throw error;
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
   * @param {string} id - ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {string} currentUserId - ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
   * @param {UserRole} currentUserRole - –†–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   * @throws {ApiError} –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   *
   * @example
   * await activitiesAPI.restoreActivity('123', 'user-123', UserRole.ORGANIZER);
   */
  async restoreActivity(
    id: string,
    currentUserId?: string,
    currentUserRole?: UserRole
  ): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è ORGANIZER
      if (currentUserRole === UserRole.ORGANIZER && currentUserId) {
        const activity = await this.getActivityById(id);
        if (activity.userId !== currentUserId) {
          throw new Error('Access denied: You can only restore your own activities');
        }
      }

      await apiClient.patch(
        `/activities?id=eq.${id}`,
        { is_deleted: false }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
      throw error;
    }
  }

  /**
   * –û–±—ã—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∞–ª–∏–∞—Å –¥–ª—è softDeleteActivity)
   * @param {string} id - ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {string} currentUserId - ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
   * @param {UserRole} currentUserRole - –†–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   * @throws {ApiError} –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteActivity(
    id: string,
    currentUserId?: string,
    currentUserRole?: UserRole
  ): Promise<void> {
    return this.softDeleteActivity(id, currentUserId, currentUserRole);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ ID (–∞–ª–∏–∞—Å –¥–ª—è getActivityById)
   * @param {string} id - ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @returns {Promise<Activity>} –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  async getActivity(id: string): Promise<Activity> {
    return this.getActivityById(id);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
   * @param {number} page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
   * @param {string} currentUserId - ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è ORGANIZER - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏)
   * @param {UserRole} currentUserRole - –†–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<ApiListResponse<Activity>>} –°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
   */
  async getDeletedActivities(
    page: number = 1,
    limit: number = API_CONSTANTS.DEFAULT_PAGE_SIZE,
    currentUserId?: string,
    currentUserRole?: UserRole,
    search?: string
  ): Promise<ApiListResponse<Activity>> {
    try {
      const queryParams: Record<string, any> = {
        // boolean filter: use PostgREST `is.true` for clarity
        is_deleted: 'is.true'
      };

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è ORGANIZER - —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (currentUserRole === UserRole.ORGANIZER && currentUserId) {
        queryParams.user_id = `eq.${currentUserId}`;
      }

      if (search) {
        queryParams.or = `(title.ilike.*${search}*,organizer_name.ilike.*${search}*,location.ilike.*${search}*)`;
      }

      const filterQuery = buildFilterQuery(queryParams);
      const orderQuery = buildOrderQuery('updated_at', false);
      const paginationConfig = buildPaginationConfig(page, limit);

      const response: AxiosResponse<any[]> = await apiClient.get(
        `${this.fullViewEndpoint}?${filterQuery}&order=${orderQuery}&select=*`,
        paginationConfig
      );

      const contentRange = response.headers['content-range'];
      const total = contentRange ? parseInt(contentRange.split('/')[1]) : 0;

      const activities = response.data.map(this.transformActivity);

      return {
        data: activities,
        pagination: {
          page,
          limit,
          total
        },
        total
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {string} id - ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {string} currentUserId - ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
   * @param {UserRole} currentUserRole - –†–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<void>}
   * @throws {ApiError} –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
   *
   * @example
   * await activitiesAPI.permanentDeleteActivity('123', 'user-123', UserRole.ORGANIZER);
   */
  async permanentDeleteActivity(
    id: string,
    currentUserId?: string,
    currentUserRole?: UserRole
  ): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const activity = await this.getActivityById(id);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è ORGANIZER
      if (currentUserRole === UserRole.ORGANIZER && currentUserId) {
        if (activity.userId !== currentUserId) {
          throw new Error('Access denied: You can only permanently delete your own activities');
        }
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      if (activity.imageUrl) {
        await this.deleteImage(activity.imageUrl);
      }

      // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await apiClient.delete(`/activities?id=eq.${id}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–≤–∫–ª—é—á–∞—è –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ)
   * @param {ActivityFilters} filters - –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @param {number} page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
   * @param {string} orderBy - –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   * @param {boolean} ascending - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   * @param {string} currentUserId - ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {UserRole} currentUserRole - –†–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<ApiListResponse<Activity>>} –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞
   */
  async getAllActivitiesForAdmin(
    filters: ActivityFilters = {},
    page: number = 1,
    limit: number = API_CONSTANTS.DEFAULT_PAGE_SIZE,
    orderBy: string = 'created_at',
    ascending: boolean = false,
    currentUserId?: string,
    currentUserRole?: UserRole
  ): Promise<ApiListResponse<Activity>> {
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
      const queryParams: Record<string, any> = {
        is_deleted: 'is.false', // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ
      };

      // –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –≤–∏–¥—è—Ç pending (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ),
      // –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –≤–∏–¥—è—Ç —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≤–∫–ª—é—á–∞—è –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ
      if (currentUserRole === UserRole.ADMIN) {
        queryParams.isApproved = 'eq.true';
      }

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è ORGANIZER - —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (currentUserRole === UserRole.ORGANIZER && currentUserId) {
        queryParams.user_id = `eq.${currentUserId}`;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      if (filters.search) {
        queryParams.or = `(title.ilike.*${filters.search}*,description.ilike.*${filters.search}*,location.ilike.*${filters.search}*,organizer_name.ilike.*${filters.search}*)`;
      }

      if (filters.categoryId) {
        queryParams.category_id = `eq.${filters.categoryId}`;
      }

      if (filters.type) {
        queryParams.type = `eq.${filters.type}`;
      }

      if (filters.location) {
        queryParams.location = `ilike.*${filters.location}*`;
      }

      if (filters.freeOnly) {
        queryParams.price = 'eq.0';
      } else {
        if (filters.minPrice !== undefined) {
          queryParams.price = `gte.${filters.minPrice}`;
        }
        if (filters.maxPrice !== undefined) {
          queryParams.price = `${queryParams.price ? queryParams.price + ',' : ''}lte.${filters.maxPrice}`;
        }
      }

      // –°—Ç—Ä–æ–∏–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const filterQuery = buildFilterQuery(queryParams);
      const orderQuery = buildOrderQuery(orderBy, ascending);
      const paginationConfig = buildPaginationConfig(page, limit);

      const response: AxiosResponse<any[]> = await apiClient.get(
        `${this.fullViewEndpoint}?${filterQuery}&order=${orderQuery}&select=*`,
        paginationConfig
      );

      const contentRange = response.headers['content-range'];
      const total = contentRange ? parseInt(contentRange.split('/')[1]) : 0;

      const activities = response.data.map(this.transformActivity);

      return {
        data: activities,
        pagination: {
          page,
          limit,
          total
        },
        total
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {boolean} includeDeleted - –í–∫–ª—é—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {string} currentUserId - ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
   * @param {UserRole} currentUserRole - –†–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Activity[]>} –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   *
   * @example
   * const userActivities = await activitiesAPI.getUserActivities('user-123', false, 'current-user', UserRole.ORGANIZER);
   */
  async getUserActivities(
    userId: string,
    includeDeleted: boolean = false,
    currentUserId?: string,
    currentUserRole?: UserRole
  ): Promise<Activity[]> {
    try {
      // ORGANIZER –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (currentUserRole === UserRole.ORGANIZER && currentUserId && userId !== currentUserId) {
        return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —á—É–∂–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      }

      const filters: string[] = [`user_id=eq.${userId}`];
      if (!includeDeleted) {
        filters.push('is_deleted=is.false');
      }
      const query = `${this.fullViewEndpoint}?${filters.join('&')}&select=*`;

      const response: AxiosResponse<any[]> = await apiClient.get(query);

      return response.data.map(this.transformActivity.bind(this));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   * @returns {Promise<Category[]>} –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   *
   * @example
   * const categories = await activitiesAPI.getCategories();
   */
  async getCategories(): Promise<Category[]> {
    try {
      const response: AxiosResponse<Category[]> = await apiClient.get('/categories');
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
   * @returns {Promise<Tag[]>} –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
   *
   * @example
   * const tags = await activitiesAPI.getTags();
   */
  async getTags(): Promise<Tag[]> {
    try {
      const response: AxiosResponse<Tag[]> = await apiClient.get('/tags');
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
   * @returns {Promise<ActivityType[]>} –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
   *
   * @example
   * const types = await activitiesAPI.getActivityTypes();
   */
  async getActivityTypes(): Promise<{id: string, name: string, value: string}[]> {
    try {
      const response: AxiosResponse<{id: string, name: string, value: string}[]> = await apiClient.get('/activity_types');
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:', error);
      // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Ç–∏–ø—ã –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      return [
        { id: '1', name: 'Activity', value: 'activity' },
        { id: '2', name: 'Event', value: 'event' },
        { id: '3', name: 'Hobby Opportunity', value: 'hobby_opportunity' },
        { id: '4', name: 'Club', value: 'club' },
        { id: '5', name: 'Competition', value: 'competition' }
      ];
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (–ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫)
   * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
   * @param {number} page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   * @returns {Promise<ApiListResponse<Activity>>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
   *
   * @example
   * const results = await activitiesAPI.searchActivities('—Ñ—É—Ç–±–æ–ª');
   */
  async searchActivities(
    query: string,
    page: number = 1,
    limit: number = API_CONSTANTS.DEFAULT_PAGE_SIZE
  ): Promise<ApiListResponse<Activity>> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
      const response: AxiosResponse<Activity[]> = await apiClient.post(
        '/rpc/search_activities',
        { search_query: query },
        buildPaginationConfig(page, limit)
      );

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
      const contentRange = response.headers['content-range'];
      const total = contentRange ? parseInt(contentRange.split('/')[1]) : 0;

      return {
        data: response.data.map(this.transformActivity),
        pagination: { page, limit, total },
        total
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:', error);
      throw error;
    }
  }

  // ====================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ======================

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ API —Ñ–æ—Ä–º–∞—Ç–∞
   * @private
   * @param {any} activity - –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
   * @returns {Activity} –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
   */
  private transformActivity(activity: any): Activity {
    return {
      id: activity.id,
      title: activity.title,
      description: activity.description,
      shortDescription: activity.short_description,
      type: activity.type,
      categoryId: activity.category_id,
      category: {
        id: activity.category_id,
        name: activity.category_name,
        icon: activity.category_icon,
      } as Category,
      location: activity.location,
      address: activity.address,
      coordinates: activity.coordinates,
      price: activity.price,
      currency: activity.currency || 'EUR',
      imageUrl: activity.image_url,
      userId: activity.user_id,
      organizer: {
        id: activity.user_id,
        fullName: activity.organizer_name,
        organizationName: activity.organizer_organization,
        email: activity.organizer_email,
        photoUrl: activity.organizer_photo_url,
        role: UserRole.ORGANIZER, // Assuming role from context, as it's not in the view
        isApproved: true, // Assuming approved, not available in view
      } as User,
      tags: activity.tags || [],
      startDate: activity.start_date ? new Date(activity.start_date) : undefined,
      endDate: activity.end_date ? new Date(activity.end_date) : undefined,
      maxParticipants: activity.max_participants,
      minAge: activity.min_age,
      maxAge: activity.max_age,
      contactEmail: activity.contact_email,
      contactPhone: activity.contact_phone,
      externalLink: activity.external_link,
      isDeleted: activity.is_deleted,
      isApproved: activity.isApproved || false,
      createdAt: new Date(activity.created_at),
      updatedAt: new Date(activity.updated_at)
    };
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   * @private
   * @param {File} file - –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns {Promise<string>} URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private async uploadImage(file: File): Promise<string> {
    try {
      const fileName = `${Date.now()}-${file.name}`;
      const filePath = `activities/${fileName}`;

      const formData = new FormData();
      formData.append('file', file);

      await storageClient.post(
        `/object/${API_CONSTANTS.STORAGE_BUCKET}/${filePath}`,
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
      return `${storageClient.defaults.baseURL}/object/public/${API_CONSTANTS.STORAGE_BUCKET}/${filePath}`;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   * @private
   * @param {string} imageUrl - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns {Promise<void>}
   */
  private async deleteImage(imageUrl: string): Promise<void> {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å —Ñ–∞–π–ª–∞ –∏–∑ URL
      const urlParts = imageUrl.split('/');
      const fileName = urlParts[urlParts.length - 1];
      const filePath = `activities/${fileName}`;

      await storageClient.delete(
        `/object/${API_CONSTANTS.STORAGE_BUCKET}/${filePath}`
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @private
   * @param {string} activityId - ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {string[]} tagIds - –ú–∞—Å—Å–∏–≤ ID —Ç–µ–≥–æ–≤
   * @returns {Promise<void>}
   */
  private async addTagsToActivity(activityId: string, tagIds: string[]): Promise<void> {
    try {
      const tagRelations = tagIds.map(tagId => ({
        activity_id: activityId,
        tag_id: tagId
      }));

      await apiClient.post('/activity_tags', tagRelations);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @private
   * @param {string} activityId - ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {string[]} tagIds - –ù–æ–≤—ã–π –º–∞—Å—Å–∏–≤ ID —Ç–µ–≥–æ–≤
   * @returns {Promise<void>}
   */
  private async updateActivityTags(activityId: string, tagIds: string[]): Promise<void> {
    try {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏
      await apiClient.delete(`/activity_tags?activity_id=eq.${activityId}`);

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
      if (tagIds.length > 0) {
        await this.addTagsToActivity(activityId, tagIds);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –û–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {string} id - ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {boolean} isApproved - –°—Ç–∞—Ç—É—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è
   * @returns {Promise<Activity>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  async approveActivity(id: string, isApproved: boolean): Promise<Activity> {
    try {
      // Note: Using 'isApproved' as per Supabase OpenAPI schema
      const response = await apiClient.patch(
        `${this.endpoint}?id=eq.${id}`,
        { isApproved }
      );

      if (!response.data || response.data.length === 0) {
        throw new Error('Failed to update activity approval status');
      }

      return this.transformActivity(response.data[0]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
   * @returns {Promise<{total: number, approved: number, pending: number, deleted: number}>}
   */
  async getActivitiesStats(): Promise<{
    total: number;
    approved: number;
    pending: number;
    deleted: number;
  }> {
    try {
      const [totalResponse, approvedResponse, pendingResponse, deletedResponse] = await Promise.all([
        apiClient.get(`${this.endpoint}?select=count`),
        apiClient.get(`${this.endpoint}?isApproved=eq.true&is_deleted=eq.false&select=count`),
        apiClient.get(`${this.endpoint}?isApproved=eq.false&is_deleted=eq.false&select=count`),
        apiClient.get(`${this.endpoint}?is_deleted=eq.true&select=count`)
      ]);

      return {
        total: totalResponse.data[0]?.count || 0,
        approved: approvedResponse.data[0]?.count || 0,
        pending: pendingResponse.data[0]?.count || 0,
        deleted: deletedResponse.data[0]?.count || 0
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
   * @param {number} params.page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   * @param {number} params.limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
   * @returns {Promise<ApiListResponse<Activity>>} –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
   */
  async getPendingActivities(params: {
    page?: number;
    limit?: number;
    search?: string;
  } = {}): Promise<ApiListResponse<Activity>> {
    try {
      const { page = 1, limit = 20, search } = params;

      // Build filters safely to avoid malformed URLs
      // Note: Using 'isApproved' as per Supabase OpenAPI schema
      const filterMap: Record<string, any> = {
        isApproved: 'eq.false',
        is_deleted: 'is.false',
      };
      if (search) {
        filterMap.or = `(title.ilike.*${search}*,description.ilike.*${search}*,location.ilike.*${search}*,organizer_name.ilike.*${search}*)`;
      }
      const filterQuery = buildFilterQuery(filterMap);
      const url = `${this.fullViewEndpoint}?${filterQuery}&order=created_at.desc&select=*`;

      const response = await apiClient.get(url, buildPaginationConfig(page, limit));

      const activities = response.data.map(this.transformActivity.bind(this));
      const total = parseInt(response.headers['content-range']?.split('/')[1] || '0');

      return {
        data: activities,
        pagination: { page, limit, total },
        total
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const activitiesAPI = new ActivitiesAPI();
export default activitiesAPI;
