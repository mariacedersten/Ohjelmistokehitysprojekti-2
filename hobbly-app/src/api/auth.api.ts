/**
 * @fileoverview API —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @module api/auth
 * @description –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤—Ö–æ–¥–∞, –≤—ã—Ö–æ–¥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º
 * —á–µ—Ä–µ–∑ Supabase REST API
 */

import { authClient, apiClient, setAuthToken, removeAuthToken, storageClient } from './config';
import { User, SignInFormData, SignUpFormData, UserRole } from '../types';
import { AxiosResponse } from 'axios';
import { v4 as uuidv4 } from 'uuid';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
interface AuthResponse {
  access_token: string;
  token_type: string;
  expires_in: number;
  refresh_token: string;
  user: SupabaseUser;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
interface AuthResult {
  user: User;
  token: string;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Supabase
 */
interface SupabaseUser {
  id: string;
  email: string;
  email_confirmed_at?: string;
  phone?: string;
  created_at: string;
  updated_at: string;
  user_metadata?: {
    fullName?: string;
    organizationName?: string;
    role?: UserRole;
    isApproved?: boolean;
    address?: string;
    organizationAddress?: string;
    organizationNumber?: string;
    photoUrl?: string;
  };
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_profiles –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 * @param {any} profile - –ü—Ä–æ—Ñ–∏–ª—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_profiles
 * @returns {User} –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 */
const transformUserProfile = (profile: any): User => {
  console.log('transformUserProfile input:', profile);
  
  const user: User = {
    id: profile.id,
    email: profile.email,
    role: profile.role as UserRole, // –†–û–õ–¨ –ò–ó –¢–ê–ë–õ–ò–¶–´ user_profiles!
    organizationName: profile.organization_name,
    fullName: profile.full_name,
    phone: profile.phone,
    address: profile.address, // –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –ë–î
    organizationAddress: profile.organization_address, // –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –ë–î
    organizationNumber: profile.organization_number, // –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –ë–î
    photoUrl: profile.avatar_url, // –≤ –ë–î –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è avatar_url
    isApproved: profile.isApproved || false,
    createdAt: new Date(profile.created_at),
    updatedAt: new Date(profile.updated_at)
  };
  
  console.log('transformUserProfile output:', user);
  return user;
};

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Supabase –∏–∑ –æ—Ç–≤–µ—Ç–∞ GoTrue (auth) –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 * @param {SupabaseUser} supabaseUser - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞ Supabase Auth
 * @returns {User} –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 * @throws {Error} –ï—Å–ª–∏ supabaseUser —Ä–∞–≤–µ–Ω null –∏–ª–∏ undefined
 */
const transformSupabaseUser = (supabaseUser: SupabaseUser): User => {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!supabaseUser) {
    throw new Error('transformSupabaseUser: supabaseUser is null or undefined');
  }

  if (!supabaseUser.id || !supabaseUser.email) {
    throw new Error('transformSupabaseUser: missing required fields (id, email)');
  }

  const metadata = supabaseUser.user_metadata || {} as any;
  
  console.log('transformSupabaseUser input:', {
    id: supabaseUser.id,
    email: supabaseUser.email,
    has_metadata: !!supabaseUser.user_metadata,
    metadata_keys: Object.keys(metadata)
  });

  const user: User = {
    id: supabaseUser.id,
    email: supabaseUser.email,
    role: metadata.role || UserRole.USER, // Default to USER if not specified
    fullName: metadata.fullName,
    phone: metadata.phone || supabaseUser.phone, // Phone —Ç–µ–ø–µ—Ä—å –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (—Å fallback)
    address: metadata.address,
    organizationName: metadata.organizationName,
    organizationAddress: metadata.organizationAddress,
    organizationNumber: metadata.organizationNumber,
    photoUrl: metadata.photoUrl,
    isApproved: false, // New users are never approved by default
    createdAt: new Date(supabaseUser.created_at),
    updatedAt: new Date(supabaseUser.updated_at),
  };
  
  console.log('transformSupabaseUser output:', user);
  return user;
};

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 * @class
 */
class AuthAPI {
  /**
   * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ Supabase JS Client
   * @private
   * @param {File} file - –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns {Promise<string>} URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private async uploadProfilePhotoAlternative(file: File): Promise<string> {
    try {
      console.log('üì∏ Using alternative upload method via Supabase JS Client...');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º createClient –Ω–∞–ø—Ä—è–º—É—é (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
      const { createClient } = await import('@supabase/supabase-js');
      const supabaseUrl = process.env.REACT_APP_SUPABASE_URL!;
      const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY!;
      
      const supabase = createClient(supabaseUrl, supabaseAnonKey);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const token = localStorage.getItem('auth_token');
      if (token) {
        supabase.auth.setSession({
          access_token: token,
          refresh_token: localStorage.getItem('refresh_token') || ''
        });
      }
      
      const ext = file.name.split('.').pop()?.toLowerCase() || 'jpg';
      const fileName = `${uuidv4()}.${ext}`;
      const filePath = `${fileName}`;

      console.log('üìÇ Alternative upload path:', `avatars/${filePath}`);
      
      const { data, error } = await supabase.storage
        .from('avatars')
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false
        });
      
      if (error) {
        throw new Error(`Alternative upload failed: ${error.message}`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
      const { data: publicData } = supabase.storage
        .from('avatars')
        .getPublicUrl(filePath);
      
      console.log('‚úÖ Alternative upload successful!');
      console.log('üì∏ Public URL:', publicData.publicUrl);
      
      return publicData.publicUrl;
    } catch (error: any) {
      console.error('‚ùå Alternative upload method failed:', error);
      throw error;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
   * @private
   * @param {File} file - –§–∞–π–ª –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   * @throws {Error} –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  private validateUploadFile(file: File): void {
    console.log('üîç Validating upload file...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    const maxSize = 5 * 1024 * 1024; // 5MB
    if (file.size > maxSize) {
      throw new Error(`File too large. Maximum size allowed is ${(maxSize / (1024 * 1024))}MB, but got ${(file.size / (1024 * 1024)).toFixed(2)}MB.`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–º–∏–Ω–∏–º—É–º 1KB)
    const minSize = 1024; // 1KB
    if (file.size < minSize) {
      throw new Error('File too small. Please choose a valid image file.');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];
    if (!allowedTypes.includes(file.type.toLowerCase())) {
      throw new Error(`Invalid file type. Allowed types: ${allowedTypes.map(type => type.split('/')[1].toUpperCase()).join(', ')}.`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞)
    const fileName = file.name.toLowerCase();
    const allowedExtensions = ['.jpg', '.jpeg', '.png', '.webp', '.gif'];
    const hasValidExtension = allowedExtensions.some(ext => fileName.endsWith(ext));
    
    if (!hasValidExtension) {
      throw new Error(`Invalid file extension. Allowed extensions: ${allowedExtensions.join(', ')}.`);
    }
    
    console.log('‚úÖ File validation passed:', {
      name: file.name,
      type: file.type,
      size: `${(file.size / (1024 * 1024)).toFixed(2)}MB`
    });
  }
  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {SignUpFormData} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   * @returns {Promise<AuthResult>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Ç–æ–∫–µ–Ω–æ–º
   * @throws {ApiError} –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   * 
   * @example
   * const result = await authAPI.signUp({
   *   email: 'user@example.com',
   *   password: 'securePassword123',
   *   fullName: 'John Doe',
   *   organizationName: 'Sport Club',
   *   agreeToTerms: true
   * });
   */
  async signUp(data: SignUpFormData): Promise<AuthResult> {
    try {
      console.log('üöÄ Starting signUp process...');
      console.log('üìß Email for registration:', data.email);
      
      // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å: –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä, –∏–Ω–∞—á–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const role = data.organizationName ? UserRole.ORGANIZER : UserRole.USER;
      console.log(`üë§ User role determined: ${role}`);

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase Auth (—Ç–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
      console.log('üîç Checking if user already exists in Auth...');
      try {
        const { data: existingAuthUser } = await authClient.get('/user');
        if (existingAuthUser?.user) {
          console.log('‚ö†Ô∏è User already logged in to Auth');
          throw new Error('You are already logged in. Please sign out first.');
        }
      } catch (error: any) {
        if (error.response?.status === 401) {
          console.log('‚úÖ No current auth user found - good for signup');
        } else {
          console.error('‚ùå Error checking existing auth user:', error);
        }
      }

      console.log('‚ÑπÔ∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ user_profiles –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–∏–≥–≥–µ—Ä handle_new_user —Å–æ–∑–¥–∞—Å—Ç –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');

      // 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è GoTrue
      console.log('üìù Preparing user metadata...');
      const userMetadata = {
        fullName: data.fullName,
        phone: data.phone, // –¢–µ–ø–µ—Ä—å phone –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        address: data.address,
        organizationName: data.organizationName,
        organizationAddress: data.organizationAddress,
        organizationNumber: data.organizationNumber,
        role: role
      };
      console.log('üìã User metadata prepared:', userMetadata);

      // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–¢–û–õ–¨–ö–û email, –±–µ–∑ phone)
      const response: AxiosResponse<AuthResponse> = await authClient.post('/signup', {
        email: data.email,
        password: data.password,
        data: userMetadata // phone —Ç–µ–ø–µ—Ä—å –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      });

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
      if (!response.data) {
        throw new Error('signUp: empty response from auth server');
      }

      if (!response.data.user) {
        throw new Error('signUp: user data missing from response');
      }

      console.log('‚úÖ Supabase Auth signup successful!');
      console.log('üìä Registration response details:', {
        has_access_token: !!response.data.access_token,
        has_user: !!response.data.user,
        user_id: response.data.user?.id,
        user_email: response.data.user?.email,
        token_length: response.data.access_token?.length || 0
      });

      // Supabase –º–æ–∂–µ—Ç –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–∫–µ–Ω —Å—Ä–∞–∑—É –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email)
      if (!response.data.access_token) {
        console.warn('signUp: access token missing - user may need email confirmation');
        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
      }

      // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –±—ã–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã
      if (response.data.access_token) {
        setAuthToken(response.data.access_token);
      } else {
        console.warn('No access token received - API requests may fail until email is confirmed');
      }

      // 6. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ user_profiles (—Ç—Ä–∏–≥–≥–µ—Ä handle_new_user —É–∂–µ —Å–æ–∑–¥–∞–ª –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å)
      const userId = response.data.user.id;
      console.log('üë§ Updating user profile with ID:', userId);
      console.log('‚ÑπÔ∏è  –¢—Ä–∏–≥–≥–µ—Ä handle_new_user —É–∂–µ —Å–æ–∑–¥–∞–ª –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å (id, email), –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è');
      
      const profileUpdateData = {
        // –ù–ï –≤–∫–ª—é—á–∞–µ–º id –∏ email - –æ–Ω–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–º handle_new_user
        full_name: data.fullName,
        phone: data.phone,
        address: data.address,
        organization_name: data.organizationName,
        organization_address: data.organizationAddress,
        organization_number: data.organizationNumber,
        role: role,
        isApproved: false // New users need approval
        // created_at, updated_at –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ë–î
      };
      console.log('üìã Profile update data prepared:', profileUpdateData);
      console.log('üîß Role being sent to DB:', {
        original_role: role,
        role_in_updateData: profileUpdateData.role,
        typeof_role: typeof profileUpdateData.role
      });

      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
        if (response.data.access_token) {
          console.log('üíæ Updating user profile in database...');
          const updateResult = await apiClient.patch(`/user_profiles?id=eq.${userId}`, profileUpdateData);
          console.log('‚úÖ User profile updated successfully in user_profiles table:', updateResult.data);
        } else {
          console.warn('‚ö†Ô∏è Skipping user_profiles update - no access token available');
          throw new Error('Registration failed: No access token received. Please check your email to confirm your account.');
        }
      } catch (profileError: any) {
        console.error('‚ùå Failed to update user profile');
        console.error('üîç Error details:', {
          status: profileError?.response?.status,
          statusText: profileError?.response?.statusText,
          data: profileError?.response?.data,
          message: profileError?.message,
          config: profileError?.config ? {
            method: profileError.config.method,
            url: profileError.config.url,
            data: profileError.config.data
          } : null
        });
        
        // –î–ª—è PATCH –∑–∞–ø—Ä–æ—Å–æ–≤ 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–µ–Ω, –Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if (profileError?.response?.status === 409 || profileError?.status === 409) {
          console.error('‚ö†Ô∏è 409 Conflict during profile update (unexpected)');
          console.log('üìä Profile update conflict details:', {
            attempted_email: data.email,
            attempted_user_id: userId,
            error_message: profileError?.response?.data?.message || profileError?.message
          });
        }
        
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è - —Ç–æ–∂–µ —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          console.log('üóëÔ∏è Profile update failed, deleting user from auth...');
          await authClient.delete(`/admin/users/${userId}`);
          console.log('‚úÖ User deleted from auth due to profile update failure');
        } catch (deleteError) {
          console.error('‚ùå Failed to delete user from auth:', deleteError);
        }
        
        // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ localStorage –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
        removeAuthToken();
        localStorage.removeItem('auth_token');
        console.log('üßπ Cleared auth token and localStorage');
        
        throw new Error(`Registration failed: Unable to update user profile. ${profileError.message || 'Please try again.'}`);
      }

      // 7. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ user_profiles (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
      let user: User;
      
      if (response.data.access_token) {
        try {
          const updatedProfileResponse = await apiClient.get(`/user_profiles?id=eq.${userId}&select=*`);
          console.log('signUp updatedProfileResponse: (–ø–æ–ª—É—á–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ user_profiles)', updatedProfileResponse);
          if (updatedProfileResponse.data && updatedProfileResponse.data.length > 0) {
            user = transformUserProfile(updatedProfileResponse.data[0]);
          } else {
            console.warn('Profile not found in user_profiles, using auth data as fallback');
            user = transformSupabaseUser(response.data.user);
          }
        } catch (profileFetchError) {
          console.error('Failed to fetch updated profile:', profileFetchError);
          console.warn('Using auth data as fallback');
          user = transformSupabaseUser(response.data.user);
        }
      } else {
        // –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ auth
        console.warn('No access token - using auth data only');
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        if (!response.data.user) {
          throw new Error('signUp: user data is missing from auth response');
        }
        
        try {
          user = transformSupabaseUser(response.data.user);
        } catch (transformError: any) {
          console.error('signUp: Failed to transform user data:', transformError);
          throw new Error(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${transformError.message || transformError}`);
        }
      }

      // 8. –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      if (data.photo) {
        try {
          console.log('üì∏ Starting photo upload...');
          const photoUrl = await this.uploadProfilePhoto(data.photo);
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å URL —Ñ–æ—Ç–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ avatar_url)
          console.log('üíæ Updating user profile with photo URL...');
          
          // PATCH –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é –≤ user_profiles —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–ª–µ–º avatar_url
          await apiClient.patch(`/user_profiles?id=eq.${userId}`, {
            avatar_url: photoUrl
          });
          
          console.log('‚úÖ Profile updated with photo URL successfully');
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç user —Å –Ω–æ–≤—ã–º URL —Ñ–æ—Ç–æ
          if (typeof user === 'object' && user !== null) {
            user.photoUrl = photoUrl; // –í –Ω–∞—à–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ User —ç—Ç–æ –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è photoUrl
          }
        } catch (uploadError: any) {
          console.error('‚ùå Photo upload failed:', uploadError);
          console.error('üìã Upload error details:', {
            message: uploadError.message,
            status: uploadError?.response?.status,
            data: uploadError?.response?.data
          });
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å
          console.warn('‚ö†Ô∏è User registration completed, but photo upload failed. User can upload photo later.');
        }
      }

      // 9. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return {
        user: user,
        token: response.data.access_token || '' // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∏—Ç–æ–≥–µ –Ω–µ —É–¥–∞–ª–∞—Å—å
      removeAuthToken();
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   * @private
   * @param {File} file - –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns {Promise<string>} URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private async uploadProfilePhoto(file: File): Promise<string> {
    try {
      console.log('üì∏ Starting photo upload process...');
      console.log('üìã Upload details:', {
        fileName: file.name,
        fileSize: file.size,
        fileType: file.type,
        sizeInMB: (file.size / (1024 * 1024)).toFixed(2)
      });

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
      this.validateUploadFile(file);
      
      // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
      try {
        console.log('üîÑ Trying alternative upload method first...');
        const alternativeUrl = await this.uploadProfilePhotoAlternative(file);
        return alternativeUrl;
      } catch (alternativeError: any) {
        console.warn('‚ö†Ô∏è Alternative upload failed, trying REST API method...', alternativeError.message);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º —á–µ—Ä–µ–∑ REST API
      }

      const ext = file.name.split('.').pop()?.toLowerCase() || 'jpg';
      const fileName = `${uuidv4()}.${ext}`;
      const bucket = 'avatars';
      const filePath = `${fileName}`;

      console.log('üìÇ Upload path:', `${bucket}/${filePath}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Supabase URL
      const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
      if (!supabaseUrl) {
        throw new Error('Supabase configuration is missing. Please contact support.');
      }

      const formData = new FormData();
      formData.append('file', file);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ localStorage –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
      const token = localStorage.getItem('auth_token');
      if (!token) {
        throw new Error('Authentication required for file upload. Please sign in again.');
      }

      console.log('üîë Token available for upload:', !!token);
      console.log('üîç Token details for debugging:', {
        tokenLength: token.length,
        tokenStart: token.substring(0, 20) + '...',
        bucket: bucket,
        filePath: filePath,
        supabaseUrl: supabaseUrl
      });
      console.log('‚¨ÜÔ∏è Uploading file to Supabase Storage...');

      const uploadResponse = await storageClient.post(
        `/object/${bucket}/${filePath}`,
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
            'Authorization': `Bearer ${token}`
          },
          timeout: 30000 // 30 second timeout for uploads
        }
      );

      console.log('‚úÖ Upload response:', {
        status: uploadResponse.status,
        statusText: uploadResponse.statusText,
        data: uploadResponse.data
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
      if (uploadResponse.status !== 200) {
        throw new Error(`Upload failed with status ${uploadResponse.status}: ${uploadResponse.statusText}`);
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è Supabase)
      const publicUrl = `${supabaseUrl}/storage/v1/object/public/${bucket}/${filePath}`;
      console.log('üéâ Photo uploaded successfully!');
      console.log('üì∏ Public URL:', publicUrl);
      
      return publicUrl;
    } catch (error: any) {
      console.error('‚ùå Photo upload failed');
      console.error('üîç Upload error details:', {
        message: error.message,
        code: error.code,
        status: error?.response?.status,
        statusText: error?.response?.statusText,
        data: error?.response?.data,
        url: error?.config?.url,
        method: error?.config?.method,
        timeout: error.code === 'ECONNABORTED',
        headers: error?.config?.headers,
        responseHeaders: error?.response?.headers
      });
      
      // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ RLS –æ—à–∏–±–æ–∫
      if (error?.response?.data && typeof error.response.data === 'object') {
        console.error('üîê RLS/Storage specific error:', {
          errorCode: error.response.data.error_code,
          errorDescription: error.response.data.error_description,
          message: error.response.data.message,
          hint: error.response.data.hint,
          details: error.response.data.details
        });
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
      if (error.code === 'ECONNABORTED') {
        throw new Error('Upload timeout. Please check your internet connection and try again.');
      } else if (error?.response?.status === 400) {
        // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ RLS –æ—à–∏–±–æ–∫
        const errorData = error.response.data;
        if (errorData?.message?.includes('row-level security') || errorData?.message?.includes('violates row-level security policy')) {
          throw new Error('Storage permission denied. Please contact support - the file storage is not properly configured.');
        } else if (errorData?.message?.includes('bucket')) {
          throw new Error('Storage bucket not found or not accessible. Please contact support.');
        } else {
          throw new Error(`Upload failed: ${errorData?.message || 'Bad request'}. Please try a different image.`);
        }
      } else if (error?.response?.status === 401) {
        throw new Error('Authentication expired. Please sign in again and try uploading the photo.');
      } else if (error?.response?.status === 403) {
        throw new Error('Access denied. You do not have permission to upload files. Please contact support.');
      } else if (error?.response?.status === 404) {
        throw new Error('Upload service not found. The storage bucket may not exist. Please contact support.');
      } else if (error?.response?.status === 409) {
        throw new Error('File already exists. Please try again or choose a different file.');
      } else if (error?.response?.status === 413) {
        throw new Error('File is too large. Please choose an image smaller than 5MB.');
      } else if (error?.response?.status === 415) {
        throw new Error('File type not supported. Please choose a JPG, PNG, or WebP image.');
      } else if (error?.response?.status === 422) {
        throw new Error('Invalid file format. Please choose a valid image file.');
      } else if (error?.response?.status === 429) {
        throw new Error('Too many upload attempts. Please wait a moment and try again.');
      } else if (error?.response?.status >= 500) {
        throw new Error('Server error during upload. Please try again later.');
      } else if (error.message?.includes('Network Error')) {
        throw new Error('Network connection error. Please check your internet and try again.');
      } else {
        // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –µ—Å–ª–∏ REST API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        if (error?.response?.status === 400) {
          try {
            console.log('üîÑ REST API failed with 400, trying alternative method as last resort...');
            const alternativeUrl = await this.uploadProfilePhotoAlternative(file);
            console.log('‚úÖ Alternative method succeeded after REST API failure!');
            return alternativeUrl;
          } catch (alternativeError: any) {
            console.error('‚ùå Both upload methods failed');
            throw new Error(`Photo upload failed: ${error.message || 'Unknown error'}. Please try again.`);
          }
        }
        
        throw new Error(`Photo upload failed: ${error.message || 'Unknown error'}. Please try again.`);
      }
    }
  }

  /**
   * –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É
   * @param {SignInFormData} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
   * @returns {Promise<AuthResult>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Ç–æ–∫–µ–Ω–æ–º
   * @throws {ApiError} –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞
   * 
   * @example
   * const result = await authAPI.signIn({
   *   email: 'user@example.com',
   *   password: 'securePassword123',
   *   rememberMe: true
   * });
   */
  async signIn(data: SignInFormData): Promise<AuthResult> {
    try {
      console.log('üöÄ Starting signIn process for:', data.email);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥
      const response: AxiosResponse<AuthResponse> = await authClient.post('/token?grant_type=password', {
        email: data.email,
        password: data.password
      });

      console.log('‚úÖ Auth response received:', {
        status: response.status,
        hasToken: !!response.data?.access_token,
        hasUser: !!response.data?.user,
        userId: response.data?.user?.id
      });

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
      if (!response.data) {
        throw new Error('signIn: empty response from auth server');
      }

      if (!response.data.access_token) {
        throw new Error('signIn: access token missing from response');
      }

      if (!response.data.user) {
        throw new Error('signIn: user data missing from response');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
      if (response.data.access_token) {
        setAuthToken(response.data.access_token);

        // –ï—Å–ª–∏ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" - —Å–æ—Ö—Ä–∞–Ω—è–µ–º refresh token
        if (data.rememberMe && response.data.refresh_token) {
          localStorage.setItem('refresh_token', response.data.refresh_token);
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ user_profiles
      const userId = response.data.user.id;
      console.log('üîç Fetching user profile for ID:', userId);

      try {
        const profileResponse = await apiClient.get(`/user_profiles?id=eq.${userId}&select=*`);

        console.log('üìä Profile response:', {
          status: profileResponse.status,
          dataLength: profileResponse.data?.length || 0,
          hasProfile: profileResponse.data?.length > 0
        });

        if (!profileResponse.data || profileResponse.data.length === 0) {
          console.warn('‚ö†Ô∏è Profile not found in user_profiles, creating fallback user');
          // Fallback to auth user data if profile doesn't exist
          return {
            user: transformSupabaseUser(response.data.user),
            token: response.data.access_token
          };
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ user_profiles
        return {
          user: transformUserProfile(profileResponse.data[0]),
          token: response.data.access_token
        };
      } catch (profileError: any) {
        console.error('‚ùå Failed to fetch user profile:', profileError);
        console.warn('‚ö†Ô∏è Using auth data as fallback');

        // Fallback to auth user data
        return {
          user: transformSupabaseUser(response.data.user),
          token: response.data.access_token
        };
      }
    } catch (error: any) {
      console.error('‚ùå SignIn error:', {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data
      });

      // Clear any partial auth state on error
      removeAuthToken();
      localStorage.removeItem('refresh_token');

      throw error;
    }
  }

  /**
   * –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   * @returns {Promise<void>}
   * @throws {ApiError} –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞
   * 
   * @example
   * await authAPI.signOut();
   */
  async signOut(): Promise<void> {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥
      await authClient.post('/logout');
      
      // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
      removeAuthToken();
      localStorage.removeItem('refresh_token');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      // –î–∞–∂–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
      removeAuthToken();
      localStorage.removeItem('refresh_token');
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<User>} –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @throws {ApiError} –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * 
   * @example
   * const currentUser = await authAPI.getCurrentUser();
   */
  async getCurrentUser(): Promise<User> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
      const token = localStorage.getItem('auth_token');
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ auth
      const authResponse: AxiosResponse<any> = await authClient.get('/user');
      
      console.log('Auth response status:', authResponse.status);
      console.log('Auth response data:', authResponse.data);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
      if (!authResponse.data) {
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      }

      // Support both response shapes from Supabase (/auth/v1/user):
      // - Root object with user fields
      // - { user: { ... } }
      if (false && !authResponse.data.user) {
        throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞');
      }

      const authUser: SupabaseUser | undefined = (authResponse.data as any).user ?? authResponse.data;
      if (!authUser) {
        throw new Error('D"DÔøΩDÔøΩDÔøΩÔøΩ<DÔøΩ DÔøΩD_DÔøΩÔøΩODÔøΩD_DÔøΩDÔøΩÔøΩ,DÔøΩDÔøΩÔøΩ? D_ÔøΩ,ÔøΩ?ÔøΩÔøΩÔøΩ,ÔøΩ?ÔøΩ,DÔøΩÔøΩÔøΩÔøΩZÔøΩ, DÔøΩ D_ÔøΩ,DÔøΩDÔøΩ,DÔøΩ ÔøΩ?DÔøΩ?DÔøΩDÔøΩ?DÔøΩ');
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!authUser.id || !authUser.email) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç id –∏–ª–∏ email');
      }

      const userId = authUser.id;
      console.log('Fetching profile for user ID:', userId);
      
      // –ì–õ–ê–í–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö –î–ê–ù–ù–´–• - —Ç–∞–±–ª–∏—Ü–∞ user_profiles
      const profileResponse = await apiClient.get(`/user_profiles?id=eq.${userId}&select=*`);
      
      console.log('Profile response status:', profileResponse.status);
      console.log('Profile response data:', profileResponse.data);
      
      if (!profileResponse.data || profileResponse.data.length === 0) {
        console.warn(`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_profiles –¥–ª—è ID: ${userId}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ auth.`);
        // Fallback to auth user data if profile doesn't exist yet
        try {
          return transformSupabaseUser(authUser);
        } catch (transformError: any) {
          console.error('–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', transformError);
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${transformError.message || transformError}`);
        }
      }
      
      const profile = profileResponse.data[0];
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑ user_profiles
      return transformUserProfile(profile);
      
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data
      });
      
      // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (error.response?.status === 401 || error.response?.status === 403) {
        console.log('–û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        removeAuthToken();
        localStorage.removeItem('auth_token');
        localStorage.removeItem('refresh_token');
      }
      
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Partial<User>} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @returns {Promise<User>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @throws {ApiError} –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
   * 
   * @example
   * const updatedUser = await authAPI.updateProfile({
   *   fullName: 'Jane Doe',
   *   phone: '+1234567890'
   * });
   */
  async updateProfile(data: Partial<User> & { photo?: File }): Promise<User> {
    try {
      console.log('üöÄ Starting updateProfile with data:', data);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
      const token = localStorage.getItem('auth_token');
      if (!token) {
        throw new Error('updateProfile: authentication token not found');
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ID
      const currentUserResponse = await authClient.get('/user');
      const currentAuthUser: SupabaseUser | undefined = (currentUserResponse.data as any).user ?? currentUserResponse.data;
      if (!currentAuthUser?.id) {
        throw new Error('updateProfile: unable to get current user ID');
      }

      const userId = currentAuthUser.id;
      console.log('üìã Updating profile for user ID:', userId);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ user_profiles
      const profileUpdateData: any = {};

      // Optional: upload new photo if provided
      if ((data as any).photo instanceof File) {
        try {
          const newUrl = await this.uploadProfilePhoto((data as any).photo as File);
          profileUpdateData.avatar_url = newUrl;
        } catch (uploadErr) {
          console.error('updateProfile: photo upload failed', uploadErr);
          throw uploadErr;
        }
      }

      // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ –Ω–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ User –≤ –ø–æ–ª—è –ë–î
      if (data.fullName !== undefined) profileUpdateData.full_name = data.fullName;
      if (data.phone !== undefined) profileUpdateData.phone = data.phone;
      if (data.address !== undefined) profileUpdateData.address = data.address;
      if (data.organizationName !== undefined) profileUpdateData.organization_name = data.organizationName;
      if (data.organizationAddress !== undefined) profileUpdateData.organization_address = data.organizationAddress;
      if (data.organizationNumber !== undefined) profileUpdateData.organization_number = data.organizationNumber;
      if (data.role !== undefined) profileUpdateData.role = data.role;
      if (data.photoUrl !== undefined) profileUpdateData.avatar_url = data.photoUrl; // –ë–î –ø–æ–ª–µ

      console.log('üíæ Profile update data:', profileUpdateData);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ user_profiles –Ω–∞–ø—Ä—è–º—É—é
      const updateResult = await apiClient.patch(`/user_profiles?id=eq.${userId}`, profileUpdateData);

      console.log('‚úÖ Profile update result:', {
        status: updateResult.status,
        statusText: updateResult.statusText
      });

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
      console.log('üîç Fetching updated profile...');
      const updatedProfileResponse = await apiClient.get(`/user_profiles?id=eq.${userId}&select=*`);

      if (!updatedProfileResponse.data || updatedProfileResponse.data.length === 0) {
        throw new Error('updateProfile: unable to fetch updated profile');
      }

      console.log('üìä Updated profile data:', updatedProfileResponse.data[0]);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
      return transformUserProfile(updatedProfileResponse.data[0]);

    } catch (error: any) {
      console.error('‚ùå Profile update error:', {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data,
        config: error.config ? {
          method: error.config.method,
          url: error.config.url,
          data: error.config.data
        } : null
      });
      throw error;
    }
  }

  /**
   * –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ email)
   * @param {string} newPassword - –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
   * @returns {Promise<void>}
   * @throws {ApiError} –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
   * 
   * @example
   * await authAPI.resetPassword('newSecurePassword123');
   */
  async resetPassword(newPassword: string): Promise<void> {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
      await authClient.put('/user', {
        password: newPassword
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
   * @param {string} email - Email –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
   * @returns {Promise<void>}
   * @throws {ApiError} –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
   * 
   * @example
   * await authAPI.requestPasswordReset('user@example.com');
   */
  async requestPasswordReset(email: string): Promise<void> {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
      await authClient.post('/recover', {
        email: email
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –∞–¥—Ä–µ—Å–∞
   * @param {string} token - –¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
   * @returns {Promise<User>} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º email
   * @throws {ApiError} –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
   * 
   * @example
   * const user = await authAPI.verifyEmail('verification-token');
   */
  async verifyEmail(token: string): Promise<User> {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
      const response: AxiosResponse<AuthResponse> = await authClient.post('/verify', {
        type: 'signup',
        token: token
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
      if (response.data.access_token) {
        setAuthToken(response.data.access_token);
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ user_profiles
      const userId = response.data.user.id;
      const profileResponse = await apiClient.get(`/user_profiles?id=eq.${userId}&select=*`);
      
      if (!profileResponse.data || profileResponse.data.length === 0) {
        throw new Error('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email');
      }

      return transformUserProfile(profileResponse.data[0]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é refresh token
   * @returns {Promise<string>} –ù–æ–≤—ã–π access token
   * @throws {ApiError} –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
   * 
   * @example
   * const newToken = await authAPI.refreshToken();
   */
  async refreshToken(): Promise<string> {
    try {
      const refreshToken = localStorage.getItem('refresh_token');
      
      if (!refreshToken) {
        throw new Error('Refresh token –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      const response: AxiosResponse<AuthResponse> = await authClient.post('/token?grant_type=refresh_token', {
        refresh_token: refreshToken
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      if (response.data.access_token) {
        setAuthToken(response.data.access_token);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º refresh token –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—à–µ–ª
        if (response.data.refresh_token) {
          localStorage.setItem('refresh_token', response.data.refresh_token);
        }
      }

      return response.data.access_token;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      removeAuthToken();
      localStorage.removeItem('refresh_token');
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞
   * 
   * @example
   * const isValid = await authAPI.isSessionValid();
   */
  async isSessionValid(): Promise<boolean> {
    try {
      await this.getCurrentUser();
      return true;
    } catch (error) {
      return false;
    }
  }

  /**
   * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
   * @param {string} oldPassword - –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
   * @param {string} newPassword - –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
   * @returns {Promise<void>}
   * 
   * @example
   * await authAPI.changePassword('oldpass123', 'newpass456');
   */
  async changePassword(oldPassword: string, newPassword: string): Promise<void> {
    try {
      await authClient.post('/user', {
        password: newPassword,
        data: {
          old_password: oldPassword
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', error);
      throw error;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const authAPI = new AuthAPI();

export default authAPI;
export { authAPI };
export type { AuthResult };
